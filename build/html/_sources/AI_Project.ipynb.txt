{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "59a9addf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: sphinx in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (4.2.0)\n",
      "Requirement already satisfied: sphinxcontrib-applehelp in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (1.0.2)\n",
      "Requirement already satisfied: sphinxcontrib-devhelp in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (1.0.2)\n",
      "Requirement already satisfied: sphinxcontrib-jsmath in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (1.0.1)\n",
      "Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (2.0.0)\n",
      "Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (1.1.5)\n",
      "Requirement already satisfied: sphinxcontrib-qthelp in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (1.0.3)\n",
      "Requirement already satisfied: Jinja2>=2.3 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (2.11.3)\n",
      "Requirement already satisfied: Pygments>=2.0 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (2.10.0)\n",
      "Requirement already satisfied: docutils<0.18,>=0.14 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (0.17.1)\n",
      "Requirement already satisfied: snowballstemmer>=1.1 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (2.1.0)\n",
      "Requirement already satisfied: babel>=1.3 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (2.9.1)\n",
      "Requirement already satisfied: alabaster<0.8,>=0.7 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (0.7.12)\n",
      "Requirement already satisfied: imagesize in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (1.2.0)\n",
      "Requirement already satisfied: requests>=2.5.0 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (2.28.1)\n",
      "Requirement already satisfied: setuptools in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (58.0.4)\n",
      "Requirement already satisfied: packaging in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from sphinx) (21.0)\n",
      "Requirement already satisfied: pytz>=2015.7 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from babel>=1.3->sphinx) (2021.3)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from Jinja2>=2.3->sphinx) (1.1.1)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from requests>=2.5.0->sphinx) (2.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from requests>=2.5.0->sphinx) (2021.10.8)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from requests>=2.5.0->sphinx) (1.26.13)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from requests>=2.5.0->sphinx) (2.8)\n",
      "Requirement already satisfied: pyparsing>=2.0.2 in /Users/suryatejasista/opt/anaconda3/lib/python3.9/site-packages (from packaging->sphinx) (3.0.4)\n",
      "\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip available: \u001b[0m\u001b[31;49m22.3.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m23.0\u001b[0m\n",
      "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip3 install sphinx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fcdae9d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023/02/15 12:24:35 INFO mlflow.tracking.fluent: Experiment with name 'AI_Project_Methodology' does not exist. Creating a new experiment.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Experiment: artifact_location='file:///Users/suryatejasista/AI%20methodologies/mlruns/1', creation_time=1676460275309, experiment_id='1', last_update_time=1676460275309, lifecycle_stage='active', name='AI_Project_Methodology', tags={}>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import libraries\n",
    "import mlflow\n",
    "import mlflow.sklearn\n",
    "\n",
    "# name the experiment and create ml folder\n",
    "mlflow.set_experiment('AI_Project_Methodology')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "cf92fbc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import ElasticNet\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import mlflow\n",
    "import mlflow.sklearn\n",
    "import sys\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "56ead9b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Car</th>\n",
       "      <th>Model</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Weight</th>\n",
       "      <th>CO2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Toyoty</td>\n",
       "      <td>Aygo</td>\n",
       "      <td>1000</td>\n",
       "      <td>790</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Mitsubishi</td>\n",
       "      <td>Space Star</td>\n",
       "      <td>1200</td>\n",
       "      <td>1160</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Skoda</td>\n",
       "      <td>Citigo</td>\n",
       "      <td>1000</td>\n",
       "      <td>929</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Fiat</td>\n",
       "      <td>500</td>\n",
       "      <td>900</td>\n",
       "      <td>865</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Mini</td>\n",
       "      <td>Cooper</td>\n",
       "      <td>1500</td>\n",
       "      <td>1140</td>\n",
       "      <td>105</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Car       Model  Volume  Weight  CO2\n",
       "0      Toyoty        Aygo    1000     790   99\n",
       "1  Mitsubishi  Space Star    1200    1160   95\n",
       "2       Skoda      Citigo    1000     929   95\n",
       "3        Fiat         500     900     865   90\n",
       "4        Mini      Cooper    1500    1140  105"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_df = pd.read_csv('cars.csv')\n",
    "data_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d567aa14",
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop unwanted column\n",
    "def data_preparation(data_df):\n",
    "    X = data_df.drop([\"Car\", \"Model\", \"CO2\"], axis = 1)\n",
    "    y = data_df[[\"CO2\"]]\n",
    "    return X, y\n",
    "\n",
    "X, y = data_preparation(data_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a8747e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Model Training\n",
    "def train_model(alpha, l1_ratio):\n",
    "    train, test = train_test_split(data_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "51ab29b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(28, 1)\n"
     ]
    }
   ],
   "source": [
    "#Model Training2\n",
    "def training_model(a, b):\n",
    "    a = data_df.drop([\"Car\", \"Model\", \"CO2\"], axis = 1)\n",
    "    b = data_df[[\"CO2\"]]\n",
    "    X_train, X_test, y_train, y_test = train_test_split(a, b, test_size = 0.2)\n",
    "    print(y_train.shape)\n",
    "    return X_train, X_test, y_train, y_test\n",
    "    \n",
    "X_train, X_test, y_train, y_test = training_model(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b5d5c819",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[102.48424674],\n",
       "       [104.49909067],\n",
       "       [107.14177021],\n",
       "       [ 95.79626041],\n",
       "       [101.77358474],\n",
       "       [100.86768592],\n",
       "       [109.10873136],\n",
       "       [106.62531908]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def Predict(X_train, X_test, y_train, y_test):\n",
    "    lr = LinearRegression()\n",
    "    model = lr.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    return y_pred\n",
    "\n",
    "Predict(X_train, X_test, y_train, y_test)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85f0e014",
   "metadata": {},
   "outputs": [],
   "source": [
    "def eval_metrics(actual, pred):\n",
    "    rmse = np.sqrt(mean_squared_error(actual, pred))\n",
    "    mae = mean_absolute_error(actual, pred)\n",
    "    r2 = r2_score(actual, pred)\n",
    "    return rmse, mae, r2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "92f783a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c9902f6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Car       0\n",
       "Model     0\n",
       "Volume    0\n",
       "Weight    0\n",
       "CO2       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2d38ba7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#     start mlflow\n",
    "    with mlflow.start_run():\n",
    "        El = ElasticNet(alpha = alpha, l1_ratio = l1_ratio, random_state = 42)\n",
    "        El.fit(X_train, y_train)\n",
    "        \n",
    "        predicted_qualities = El.predict(X_test)\n",
    "        \n",
    "#         print the metrics parameters\n",
    "        (rmse, mae, r2) = eval_metrics(y_test, predicted_qualities)\n",
    "        print(\"ElasticNet model (alpha = %f, l1_ratio = %f):\" % (alpha, l1_ratio))\n",
    "        print(\" RMSE: %s\" % rmse)\n",
    "        print(\" MAE: %s\" % mae)\n",
    "        print(\" R2: %s \" % r2)\n",
    "        \n",
    "#         log mlflow on the parameters\n",
    "        mlflow.log_param(\"alpha\", alpha)\n",
    "        mlflow.log_param(\"l1_ratio\", l1_ratio)\n",
    "        mlflow.log_metric(\"rmse\", rmse)\n",
    "        mlflow.log_metric(\"r2\", r2)\n",
    "        mlflow.log_metric(\"mae\", mae)\n",
    "        \n",
    "#         save the model\n",
    "        mlflow.sklearn.log_model(El, \"model\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cee29542",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ElasticNet model (alpha = 0.500000, l1_ratio = 0.500000):\n",
      " RMSE: 5.582350243148366\n",
      " MAE: 4.638484370084612\n",
      " R2: 0.45669966138367013 \n"
     ]
    }
   ],
   "source": [
    "train_model(0.5, 0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "68cdb263",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ElasticNet model (alpha = 0.200000, l1_ratio = 0.200000):\n",
      " RMSE: 8.141104859072199\n",
      " MAE: 7.57453402197484\n",
      " R2: -0.12973161920015297 \n"
     ]
    }
   ],
   "source": [
    "train_model(0.2, 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92d80048",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_model(0.4, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ca95c0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_model(0.1, 0.4)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
